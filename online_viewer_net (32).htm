<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover"/>
<title>SMART Classes Quiz — Pro</title>
<link rel="preconnect" href="https://fonts.googleapis.com"/>
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&family=Playfair+Display:wght@600;700&display=swap" rel="stylesheet"/>
<style>
  :root{
    --bg:#f6f8fc; --panel:#ffffff; --ink:#0f1a2a; --muted:#5f6b85;
    --primary:#2e5bff; --primary-dark:#2246c4; --ok:#10b981; --bad:#ef4444; --warn:#ef4444; --hint:#a16207;
    --ring:#d6def4; --shadow:0 10px 30px rgba(17,24,39,.10); --r:14px;
  }
  html,body{height:100%;width:100%;margin:0;padding:0;background:var(--bg);color:var(--ink);font-family:Inter,system-ui,Arial,sans-serif;overflow:hidden;}
  body.fs-lock{position:fixed; inset:0; width:100%; height:100dvh; overflow:hidden;} /* mobile FS lock */
  .app{display:flex;flex-direction:column;min-height:100dvh;width:100%;padding-bottom:env(safe-area-inset-bottom);}
  .top{height:64px;min-height:64px;background:var(--primary);color:#fff;display:flex;align-items:center;justify-content:space-between;padding:0 18px;box-sizing:border-box;box-shadow:var(--shadow);user-select:none;padding-left:calc(18px + env(safe-area-inset-left));padding-right:calc(18px + env(safe-area-inset-right));}
  .brand{font-family:Playfair Display,Georgia,serif;font-weight:700;letter-spacing:.4px;}
  .meta{display:flex;gap:12px;align-items:center;font-weight:700;}
  .pill{background:rgba(255,255,255,.16);padding:7px 12px;border-radius:30px;}
  .timer-pill{border:1px solid rgba(255,255,255,.35);}
  .stage{flex:1;display:grid;place-items:center;padding:12px;box-sizing:border-box;max-width:100vw;}
  .board{width:min(1200px,96vw);height:calc(100dvh - 64px - 24px);background:var(--panel);border-radius:18px;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:10px;padding:18px 20px;box-sizing:border-box;}
  .qbar{display:flex;align-items:center;justify-content:space-between;color:var(--muted);font-weight:700;}
  .question{font-size:clamp(20px,2vw,32px);line-height:1.25;font-weight:800;margin:8px 0 10px 0;}
  .scroll-area{flex:1 1 0;min-height:0;overflow-y:auto; -webkit-overflow-scrolling: touch;}
  .options{display:grid;grid-auto-rows:minmax(56px,auto);gap:12px;margin-top:6px;}
  .opt{position:relative;display:flex;align-items:center;padding:14px 16px;border-radius:var(--r);background:#f3f6ff;border:1.5px solid var(--ring);color:#16386f;font-weight:600;cursor:pointer;overflow:hidden;transform:translateY(10px);opacity:0;animation:slideIn .42s ease forwards;transition:background .15s,border-color .15s,transform .12s;}
  .opt:hover{background:#e7eeff;border-color:#bcd0ff;}
  .opt.selected{background:var(--primary);color:#fff;border-color:var(--primary);}
  @keyframes slideIn{to{transform:translateY(0);opacity:1;}}
  .btn{padding:12px 16px;border:none;border-radius:12px;font-weight:800;letter-spacing:.3px;cursor:pointer;transition:transform .08s ease,background .18s;user-select:none;}
  .btn:active{transform:translateY(1px);}
  .btn.primary{background:var(--primary);color:#fff;}
  .btn.primary:hover{background:var(--primary-dark);}
  .btn.ghost{background:#eef2ff;border:1.5px solid var(--ring);color:#17386e;}
  .btn.warn{background:#ffe8e8;color:#8b1c1c;border:1.5px solid #ffd0d0;}
  .btn.danger{background:var(--warn);color:#fff;}
  .footer{display:flex;align-items:center;justify-content:space-between;border-top:1px dashed #e6edff;padding-top:10px;margin-top:8px;color:var(--muted);gap:10px;}
  .left-actions,.right-actions{display:flex;gap:10px;align-items:center;}
  .answer-area{margin-top:10px;padding-top:8px;border-top:1px solid #eef2ff;}
  .hint{color:var(--hint);font-weight:600;margin-top:6px;}
  .ans{color:var(--ok);font-weight:800;margin-top:6px;}
  .perQTimer{font-weight:800;color:var(--bad);}
  .heading{font-family:Playfair Display,Georgia,serif;font-weight:700;margin:0;}
  .stack{display:grid;align-content:center;justify-items:center;gap:14px;}
  .field{width:min(520px,92vw);}
  .input{width:100%;padding:12px 14px;border-radius:12px;border:1.5px solid var(--ring);background:#f8faff;font-size:16px;outline:none;transition:transform 0.2s ease, box-shadow 0.2s ease;}
  .input:focus{border-color:#9bb7ff;transform:translateY(-2px);box-shadow:0 4px 10px rgba(46,91,255,0.1);}
  .subtitle{color:var(--muted);font-weight:600;}
  .scrim{position:fixed;inset:0;background:rgba(0,0,0,.4);display:none;align-items:center;justify-content:center;z-index:9999;}
  .dialog{background:#fff;border-radius:16px;padding:18px;box-shadow:var(--shadow);width:min(420px,92vw);}
  .dialog h3{margin:0 0 8px 0;font-family:Playfair Display,Georgia,serif;}
  #board, .scroll-area, .question, .options, .opt {
    -webkit-user-select:none; -moz-user-select:none; -ms-user-select:none; user-select:none;
    -webkit-touch-callout:none;
  }

  /* Mobile refinements */
  @media (max-width:740px){
    .top{height:56px;min-height:56px;}
    .board{
      border-radius:0;
      height:calc(100dvh - 56px);
      padding:12px;
      padding-left:calc(12px + env(safe-area-inset-left));
      padding-right:calc(12px + env(safe-area-inset-right));
    }
    .brand{font-size:1rem;}
    .meta .pill{padding:6px 10px;font-size:.85rem;}
    .question{font-size:1.12rem;line-height:1.32;}
    .options{gap:10px;}
    .opt{min-height:56px;padding:12px 14px;font-size:1rem;}
    .btn{padding:12px 14px;font-size:0.98rem;border-radius:12px;}
    .footer{
      flex-wrap:wrap;gap:8px;
      padding-bottom:calc(env(safe-area-inset-bottom) + 6px);
    }
    .left-actions,.right-actions{gap:8px;}
    .mobile-center{
      height:calc(100dvh - 56px);
      display:flex;align-items:center;justify-content:center;width:100%;
      padding-left:env(safe-area-inset-left);padding-right:env(safe-area-inset-right);
    }
    .stack.mobile-card{
      background:#fff;border:1px solid var(--ring);border-radius:16px;
      padding:16px;width:min(520px,92vw);box-shadow:var(--shadow);
    }
  }
  @media (max-width:420px){
    .board{
      padding:10px 10px;
      padding-left:calc(10px + env(safe-area-inset-left));
      padding-right:calc(10px + env(safe-area-inset-right));
    }
    .question{font-size:1.06rem;}
    .opt{min-height:54px;padding:12px;font-size:0.98rem;}
    .btn{width:calc(50% - 6px);}
    .left-actions .btn, .right-actions .btn{width:auto;}
    .meta .pill{font-size:.8rem;padding:5px 8px;}
  }

  /* Login animation */
  .login-field{position:relative;width:100%;height:calc(100dvh - 64px);background: radial-gradient(1100px 700px at -10% 10%, #eaf0ff 0%, transparent 60%), radial-gradient(1000px 800px at 110% 20%, #f5e9ff 0%, transparent 55%), linear-gradient(180deg,#f4f7ff 0%, #ffffff 100%);overflow:hidden; background-size: 200% 200%; animation: bg-pan 25s ease infinite;}
  canvas#stars{position:absolute;inset:0;z-index:0;opacity:0.7;}
  .login-glass{position:relative;z-index:1;width:100%;height:100%;display:flex;align-items:center;justify-content:center;padding:20px;}
  .glass-card{width:min(520px,92vw);background:rgba(255,255,255,0.72);border:1px solid rgba(205,214,246,0.8);box-shadow:0 20px 60px rgba(46,91,255,0.12);border-radius:20px;padding:24px 22px;animation:glassIn .6s ease forwards;transform:translateY(12px) scale(.98);opacity:0; display:flex; flex-direction:column; align-items:center;}
  .login-icon{margin-bottom:12px;animation:pulse 2.5s infinite ease-in-out;}
  @keyframes glassIn{to{transform:translateY(0) scale(1);opacity:1;}}
  @keyframes pulse { 0%, 100% { transform: scale(1); opacity: 0.8; } 50% { transform: scale(1.08); opacity: 1; } }
  @keyframes bg-pan { 0% { background-position: 10% 0%; } 50% { background-position: 90% 100%; } 100% { background-position: 10% 0%; } }
  .type-line{font-family:Playfair Display,Georgia,serif;font-weight:700;font-size:1.35rem;white-space:nowrap;overflow:hidden;border-right:2px solid #2e5bff;width:0;animation:typing 2.2s steps(28,end) forwards, caret 1s step-end infinite;text-align:center;margin:0 auto;}
  @keyframes typing{to{width:100%;}} @keyframes caret{50%{border-color:transparent;}}
  .btn.primary.login-cta{position:relative;overflow:hidden;}
  .btn.primary.login-cta.valid::after{content:"";position:absolute;inset:0;background:linear-gradient(120deg,transparent 0%,rgba(255,255,255,.35) 15%,transparent 30%);transform:translateX(-120%);animation:shimmer 1.8s ease-in-out infinite;}
  @keyframes shimmer{60%{transform:translateX(120%);}100%{transform:translateX(120%);}}
</style>
</head>
<body>
<div class="app" id="app">
  <div class="top">
    <div class="brand">SMART Classes Quiz</div>
    <div class="meta" id="topMeta"></div>
  </div>
  <div class="stage"><div class="board" id="board"></div></div>
</div>

<div class="scrim" id="gateScrim">
  <div class="dialog">
    <h3>Stay Focused</h3>
    <div id="gateTask" class="subtitle" style="margin-bottom:10px;"></div>
    <input id="gateAns" class="input" placeholder="Enter answer"/>
    <button class="btn primary" style="margin-top:10px;width:100%;" onclick="checkGate()">Continue Test</button>
  </div>
</div>

<div class="scrim" id="submitScrim">
  <div class="dialog">
    <h3>Submit Quiz?</h3>
    <div class="subtitle">Once submitted, answers cannot be changed.</div>
    <div style="display:flex;gap:10px;margin-top:12px;justify-content:flex-end;">
      <button class="btn ghost" onclick="hideSubmit()">Cancel</button>
      <button class="btn danger" onclick="doSubmit()">Submit</button>
    </div>
  </div>
</div>

<script>
  // Strong right-click/selection blocking
  (function secureBlock(){
    const kill = e => { e.preventDefault(); e.stopPropagation(); return false; };
    ['contextmenu','copy','cut','dragstart','selectstart'].forEach(evt=>document.addEventListener(evt, kill, true));
    document.addEventListener('mousedown', e => { if(e.button===2) kill(e); }, true);
    document.addEventListener('pointerdown', e => { if(e.button===2) kill(e); }, true);
    document.addEventListener('keydown', e => { const k=e.key.toLowerCase(); if((e.ctrlKey||e.metaKey)&&['c','x','s','u','p','a'].includes(k)) kill(e); if(k==='f12') kill(e); }, true);
    let t=null; document.addEventListener('touchstart', e=>{ t=setTimeout(()=>kill(e),400); }, {passive:false,capture:true}); document.addEventListener('touchend', ()=>clearTimeout(t), {capture:true});
  })();

  const questions = [
    {q:"Six houses, K, L, M, N, O and P are located in the same colony. P is 400 m to the West of K. M is 200 m to the East of L. O is 300 m to the North of K. N is 150 m to the South of L. L is 250 m to the South of K. What is the straight distance between O and N?", options:["350 m","400 m","700 m","600 m"], answer:2},
    {q:"Shyam lal goes 8 km in West from a certain point. Then, he moves to his right and goes 8 km. In the end he goes 25 km in South-East direction. How far is he from starting point?", options:["10 km","20 km","15 km","None of these"], answer:3},
    {q:"Varun walks 5 km North, then walks 4 km East and turns right and walks 5 km, then turn right and walks 4 km. Finally he walks 7 km towards South. How far is he from the starting point?", options:["7 km","6 km","8 km","5 km"], answer:0},
    {q:"A woman walks 9 km towards East, turns right and again walks 9 km, then she turns right and walks 4 km. Now, she walks 14 km towards North, turns right and walks 11 km. At the end she turns right and walks 5 km. How far is she from the starting point ?", options:["13 km","20 km","18 km","16 km"], answer:3},
    {q:"A man is standing in lawn facing East direction. If the man turns 45 degrees in anti-clockwise direction and 135 degrees in clockwise direction, which direction will be face now?", options:["North","East","South","West"], answer:2},
    {q:"Sohan is facing North-West. He turns 90° clockwise, then 360° anti-clockwise and then 90° clockwise. In which direction is Sohan facing now?", options:["North-West","North-East","South-West","South-East"], answer:3},
    {q:"Ramdin started from his office and walked 15 km in the South direction and reached the bus stop, and then turned to his left and walked 8 km straight on the road, From there, he turned to his left, walked 15 km and reached the Central Library. After this, he turned to his left again and walked 4 km to reach his hostel. How far and in which direction is the hostel with respect to his office?", options:["12 km towards North","7 km towards South","4 km towards West","4 km towards East"], answer:3},
    {q:"Rupali goes to office from her house via a specific route. Initially, she travels 17 km towards the North. then turns right towards the East and travels 15 km. From here, she again takes a right turn and travels 17 km. Now, she turns left and travels 7 km and finally reaches her office. In which direction and how many km away (considering the shortest distance) is she from her house?", options:["West, 22 km","West, 29 km","East, 24 km","East, 22 km"], answer:3},
    {q:"Karan drives 6 km towards North from Point A. He takes a left turn and drives 3 km. Again he takes a left turn and drives 3 km. He takes a left turn and drives 6 km. He takes a right turn and drives 3 km to reach Point B. How far and towards which direction should he drive in order to reach Point A again?", options:["4 km towards North","2 km towards South","3 km towards West","5 km towards East"], answer:2},
    {q:"Namit starts from a Point 'Z' and travels 4 km towards West to reach 'Y'. Then, he takes a left turn and covers 2.5 times the distance covered between 'Y' and 'Z' and reaches at Point 'X'. From there he takes a left turn and travels 4 km to reach destination 'B'. Then, he takes a left turn and covers some distance and walks 2 km ahead of Z to reach Point 'A'. What is the shortest distance between 'A' and 'B' and the direction of B with respect to A?", options:["12 km, North","12 km, South","8 km, North","8 km, South"], answer:1}
  ];

  const board=document.getElementById('board'), topMeta=document.getElementById('topMeta');
  const gateScrim=document.getElementById('gateScrim'), submitScrim=document.getElementById('submitScrim');
  let user="", mode="", q=0, selected=-1;
  let results=[], perTimes=[], perStop={}, perStart={}, perInt={};
  let mainTimer=null, practiceWatch=null, practiceElapsed=0;
  let gateA=0, gateB=0, isGateOpen=false;
  let fullscreenCheckInterval = null;

  async function ensureFullscreen(){
    document.body.classList.add('fs-lock');
    const el=document.documentElement;
    try{ if(!document.fullscreenElement && el.requestFullscreen) await el.requestFullscreen(); }catch(e){}
  }

  function pauseAllTimers() {
    if (mainTimer) { clearInterval(mainTimer); mainTimer = null; }
    if (practiceWatch) { clearInterval(practiceWatch); practiceWatch = null; }
    pausePerStopwatch(q);
  }

  function resumeAllTimers() {
    if (mode === 'timer' && !practiceWatch) {
      practiceWatch = setInterval(() => {
        practiceElapsed++;
        const el = document.getElementById('swPill');
        if (el) el.textContent = 'Stopwatch: ' + fmt(practiceElapsed);
      }, 1000);
    }
    startPerStopwatch();
  }
  
  document.addEventListener('fullscreenchange', () => {
    const isQuizActive = mode === 'timer';
    if (document.fullscreenElement && isQuizActive) {
      resumeAllTimers();
    } else if (!document.fullscreenElement && isQuizActive) {
      openGate();
    }
  });

  document.addEventListener('visibilitychange', () => {
    const isQuizActive = mode === 'timer';
    if (document.visibilityState === 'visible' && isQuizActive) {
      openGate();
    }
  });

  function openGate(){
    if (isGateOpen) return;
    isGateOpen = true;
    pauseAllTimers();
    gateA = 100 + Math.floor(Math.random()*900);
    gateB = Math.floor(Math.random()*900);
    if(gateB>=gateA) gateB = Math.floor(gateA/2);
    document.getElementById('gateTask').textContent = `Solve to continue: ${gateA} - ${gateB} = ?`;
    document.getElementById('gateAns').value = "";
    gateScrim.style.display='flex';
  }

  function checkGate(){
    const val = Number(document.getElementById('gateAns').value.trim());
    if(val === (gateA - gateB)){ 
      gateScrim.style.display='none'; 
      isGateOpen = false;
      ensureFullscreen(); 
    }
    else { alert('Incorrect, try again.'); }
  }

  function renderTopMeta(){
    const label = mode === 'timer' ? 'Stopwatch Mode' : '—';
    const timePill = mode === 'timer' ? `<span class="pill timer-pill" id="swPill">Stopwatch: ${fmt(practiceElapsed)}</span>` : '';
    topMeta.innerHTML = `<span class="pill">${label}</span>${timePill}`;
  }
  function fmt(secs){ const m=Math.floor(secs/60), s=secs%60; return `${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`; }

  function loginView(){
    mode=""; renderTopMeta();
    board.innerHTML = `
      <div class="login-field">
        <canvas id="stars"></canvas>
        <div class="login-glass">
          <div class="glass-card">
            <div class="login-icon">
              <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L8 12v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1h-2v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z" fill="url(#grad)"/>
                <defs><linearGradient id="grad" x1="0" y1="0" x2="1" y2="1"><stop offset="0%" stop-color="#89f7fe" /><stop offset="100%" stop-color="#66a6ff" /></linearGradient></defs>
              </svg>
            </div>
            <div class="type-line">Welcome to SMART Classes</div>
            <div class="subtitle" style="margin:8px 0 14px;">Sign in to begin the quiz</div>
            <div class="field"><input id="name" class="input" placeholder="Student name" autocomplete="off"></div>
            <div class="field"><input id="pass" class="input" type="password" placeholder="Password"></div>
            <button id="loginBtn" class="btn primary login-cta" onclick="doLogin()">Login</button>
          </div>
        </div>
      </div>`;
    ensureFullscreen();
    const cvs = document.getElementById('stars'), ctx = cvs.getContext('2d');
    const DPR = Math.min(window.devicePixelRatio || 1, 2);
    let w=0,h=0, parts=[];
    function resize(){
      w = cvs.clientWidth = cvs.parentElement.clientWidth;
      h = cvs.clientHeight = cvs.parentElement.clientHeight;
      cvs.width = Math.floor(w*DPR); cvs.height = Math.floor(h*DPR);
      ctx.setTransform(DPR,0,0,DPR,0,0);
      parts = Array.from({length: 60}, ()=>({x: Math.random()*w, y: Math.random()*h, r: 1+Math.random()*2, vx: -0.3+Math.random()*0.6, vy: -0.3+Math.random()*0.6, a: 0.4+Math.random()*0.4}));
    }
    function step(){ ctx.clearRect(0,0,w,h); parts.forEach(p=>{ p.x+=p.vx; p.y+=p.vy; if(p.x<0||p.x>w) p.vx*=-1; if(p.y<0||p.y>h) p.vy*=-1; ctx.beginPath(); ctx.arc(p.x,p.y,p.r,0,Math.PI*2); ctx.fillStyle=`rgba(46,91,255,${p.a})`; ctx.fill(); }); requestAnimationFrame(step); }
    resize(); step(); window.addEventListener('resize', resize);
    const nameEl = document.getElementById('name'), passEl = document.getElementById('pass'), btn = document.getElementById('loginBtn');
    const toggle = ()=>{ if(nameEl.value.trim().length>1 && passEl.value.trim().length>=3) btn.classList.add('valid'); else btn.classList.remove('valid'); };
    nameEl.addEventListener('input', toggle); passEl.addEventListener('input', toggle);
  }

  function doLogin(){
    const n=document.getElementById('name').value.trim(), p=document.getElementById('pass').value;
    if(!n) return alert('Enter name');
    if(p!=='214214214') return alert('Incorrect password');
    user=n; deviceView();
  }

  function deviceView(){
    mode=""; renderTopMeta();
    board.innerHTML = `
      <div class="mobile-center">
        <div class="stack mobile-card">
          <h2 class="heading">Choose Device</h2>
          <div class="field" style="display:grid;gap:12px;">
            <button class="btn primary" onclick="initiateMobileMode()">Mobile</button>
            <button class="btn ghost" onclick="setDevice('desktop')">Computer / Laptop</button>
            <button class="btn warn" onclick="loginView()">Back</button>
          </div>
        </div>
      </div>`;
    ensureFullscreen();
  }
  
  function initiateMobileMode() {
      ensureFullscreen();
      if (fullscreenCheckInterval) clearInterval(fullscreenCheckInterval);
      board.innerHTML = `
        <div class="mobile-center">
          <div class="stack mobile-card">
            <h2 class="heading">Activating Fullscreen...</h2>
            <div class="subtitle">Please allow fullscreen to begin the quiz. The test will start automatically.</div>
          </div>
        </div>`;
      let attempts = 0;
      fullscreenCheckInterval = setInterval(() => {
        if (document.fullscreenElement) {
          clearInterval(fullscreenCheckInterval);
          modeView();
        } else {
          attempts++;
          if (attempts > 20) { // Timeout after 5 seconds
            clearInterval(fullscreenCheckInterval);
            board.innerHTML = `
              <div class="mobile-center">
                <div class="stack mobile-card">
                  <h2 class="heading">Fullscreen Required</h2>
                  <div class="subtitle" style="text-align:center; margin-bottom:12px;">You must enable fullscreen mode to take the quiz on a mobile device.</div>
                  <button class="btn primary" onclick="initiateMobileMode()">Retry</button>
                  <button class="btn ghost" onclick="deviceView()">Go Back</button>
                </div>
              </div>`;
          }
        }
      }, 250);
  }

  function setDevice(deviceType){
      if (deviceType === 'desktop') {
          ensureFullscreen();
          modeView();
      }
  }

  function modeView(){
    mode=""; renderTopMeta();
    board.innerHTML = `
      <div class="mobile-center">
        <div class="stack mobile-card">
          <h2 class="heading">Select Mode</h2>
          <div class="field" style="display:grid;gap:12px;">
            <button class="btn primary" onclick="start('timer')">Try with Stopwatch</button>
          </div>
        </div>
      </div>`;
    ensureFullscreen();
  }

  function start(m){
    mode=m; q=0; selected=-1; results=[]; perTimes=[]; perStop={}; perStart={};
    clearInterval(mainTimer); clearInterval(practiceWatch);
    if(mode==='timer'){
      practiceElapsed=0; 
      renderTopMeta();
    }
    renderQuestion(); 
    ensureFullscreen();
  }

  function startPerStopwatch(){
    if (perInt[q] || isGateOpen) return;
    if(perStop[q]==null) perStop[q]=0;
    perStart[q]=Date.now();
    perInt[q]=setInterval(()=>{
      const sec = Math.floor((Date.now()-perStart[q])/1000) + (perStop[q]||0);
      const el=document.getElementById('perTimer');
      if(el) el.textContent='Q stopwatch: '+fmt(sec);
    },500);
  }
  function pausePerStopwatch(i){
    if(perStart[i]){ perStop[i]=(perStop[i]||0)+Math.floor((Date.now()-perStart[i])/1000); perStart[i]=null; }
    if(perInt[i]){ clearInterval(perInt[i]); perInt[i]=null; }
  }

  function renderQuestion(){
    if(q>=questions.length){ submitConfirm(); return; }
    const d=questions[q];
    const opts = d.options.map((t,i)=>`<div class="opt" style="animation-delay:${i*60}ms" id="opt${i}" onclick="pick(${i})">${t}</div>`).join('');
    board.innerHTML = `
      <div class="qbar">
        <div>Question ${q+1} / ${questions.length}</div>
        <div class="perQTimer" id="perTimer">Q stopwatch: 00:00</div>
      </div>
      <div class="scroll-area" id="quizScroll">
        <div class="question">${d.q}</div>
        <div class="options">${opts}</div>
        <div class="answer-area" style="margin-bottom:14px;">
          <div class="ans" id="ansBox" style="display:none;"></div>
          <div class="hint" id="hintBox" style="display:none;"></div>
        </div>
      </div>
      <div class="footer">
        <div class="left-actions">
          <button class="btn ghost" onclick="prev()">Previous</button>
          <button class="btn warn" onclick="skip()">Skip</button>
        </div>
        <div class="right-actions">
          <button class="btn primary" onclick="next()">Next</button>
          <button class="btn danger" onclick="submitConfirm()">Submit</button>
        </div>
      </div>`;
    selected=-1; 
    resumeAllTimers();
    const sc = document.getElementById('quizScroll'); if(sc){ sc.style.paddingBottom = '84px'; }
    (function bindLocalGuards(){
      const kill = e => { e.preventDefault(); e.stopPropagation(); return false; };
      const nodes = [document.getElementById('perTimer'), ...Array.from(document.querySelectorAll('.question, .options, .opt'))];
      nodes.forEach(n=>{
        if(!n) return;
        ['contextmenu','copy','cut','dragstart','selectstart'].forEach(evt=> n.addEventListener(evt, kill, true));
        n.addEventListener('mousedown', e=>{ if(e.button===2) kill(e); }, true);
        n.addEventListener('pointerdown', e=>{ if(e.button===2) kill(e); }, true);
      });
    })();
  }

  function pick(i){
    selected=i;
    for(let k=0;k<questions[q].options.length;k++){
      const el=document.getElementById('opt'+k);
      if(el) el.classList.remove('selected');
    }
    const cur=document.getElementById('opt'+i); if(cur) cur.classList.add('selected');
  }
  function showAnswer(){ if(selected<0){ alert('Select an option first'); return; } const d=questions[q]; const box=document.getElementById('ansBox'); box.style.display='block'; box.textContent='Correct answer: '+d.options[d.answer]; }
  function showHint(){ const d=questions[q]; const box=document.getElementById('hintBox'); box.style.display='block'; box.textContent='Hint: '+d.hint; }

  function prev(){ if(q===0) return; pausePerStopwatch(q); q--; renderQuestion(); }
  function skip(){ recordAndGo(-1); }
  function next(){ recordAndGo(selected>=0?selected:-1); }

  function recordAndGo(choice){
    pausePerStopwatch(q);
    perTimes[q]=perStop[q]||0;
    results[q]={pick:choice, correct:(choice===questions[q].answer)};
    q++; renderQuestion();
  }

  function submitConfirm(){ submitScrim.style.display='flex'; }
  function hideSubmit(){ submitScrim.style.display='none'; }
  function doSubmit(){
    hideSubmit();
    pauseAllTimers();
    Object.keys(perInt).forEach(i=>{ if(perInt[i]) clearInterval(perInt[i]); });
    for(let i=0;i<questions.length;i++){
      if(perTimes[i]==null){ if(perStart[i]) pausePerStopwatch(i); perTimes[i]=perStop[i]||0; }
      if(results[i]==null) results[i]={pick:-1, correct:false};
    }
    mode = 'results';
    resultView();
  }

  function getFeedbackMessage(accuracy, name) {
    let messages;
    if (accuracy >= 90) {
      messages = [
        `Outstanding work, ${name}! You have a sharp mind for this. Keep up the brilliant effort!`,
        `Exceptional performance, ${name}! Your dedication is clearly paying off. A truly impressive score!`,
        `Top-tier results, ${name}! You've mastered these concepts. Fantastic job!`
      ];
    } else if (accuracy >= 70) {
      messages = [
        `Great job, ${name}! You're well on your way to mastery. A little more practice and you'll be unstoppable!`,
        `This is a strong performance, ${name}! You have a solid understanding. Keep pushing forward!`,
        `Very well done, ${name}! You're grasping the key ideas. Let's aim for perfection next time!`
      ];
    } else if (accuracy >= 50) {
        messages = [
        `Solid effort, ${name}! You've built a good foundation. Consistent practice is the key to climbing higher!`,
        `A good start, ${name}! Every expert was once a beginner. Keep reviewing and you'll see great progress!`,
        `You're on the right track, ${name}! You've got the basics down. Let's build on this momentum.`
      ];
    } else {
      messages = [
        `The first step is always the most important, ${name}. Great job for taking on the challenge! Let's review and try again.`,
        `Every attempt is a learning opportunity, ${name}. You've got this! Let's go over the concepts together.`,
        `Thanks for giving it your best shot, ${name}! Persistence is everything. Let's build up from here.`
      ];
    }
    const randomIndex = Math.floor(Math.random() * messages.length);
    return messages[randomIndex];
  }

  function drawGauge(id,val,label){
    const c=document.getElementById(id),ctx=c.getContext('2d'),w=c.width,h=c.height,r=Math.min(w,h)/2-8,cx=w/2,cy=h-8;
    ctx.clearRect(0,0,w,h);
    ctx.lineWidth=14; ctx.strokeStyle='#e9eefc'; ctx.beginPath(); ctx.arc(cx,cy,r,Math.PI,2*Math.PI); ctx.stroke();
    const ang=Math.PI+(val/100)*Math.PI; ctx.strokeStyle='#2e5bff'; ctx.beginPath(); ctx.arc(cx,cy,r,Math.PI,ang); ctx.stroke();
    ctx.fillStyle='#0f1a2a'; ctx.font='700 18px Inter'; ctx.textAlign='center'; ctx.fillText(val+'%',cx,cy-6);
    ctx.fillStyle='#5f6b85'; ctx.font='600 12px Inter'; ctx.fillText(label,cx,cy+18);
  }
  function drawBar(id,percent){
    const c=document.getElementById(id),ctx=c.getContext('2d'),w=c.width,h=c.height;
    ctx.clearRect(0,0,w,h);
    ctx.fillStyle='#e9eefc'; ctx.fillRect(0,h/2-10,w,20);
    ctx.fillStyle='#10b981'; ctx.fillRect(0,h/2-10,Math.max(0,Math.min(w,Math.round((percent/100)*w))),20);
  }
  function drawHistogram(id,data){
    const c=document.getElementById(id),ctx=c.getContext('2d'),w=c.width,h=c.height;
    ctx.clearRect(0,0,w,h);
    const max=Math.max(...data,1), bw=Math.max(2,Math.floor(w/data.length)-2);
    data.forEach((v,i)=>{
      const bh=Math.round((v/max)*(h-10));
      ctx.fillStyle='#2e5bff22'; ctx.fillRect(i*(bw+2), h-bh, bw, bh);
      ctx.fillStyle='#2e5bff'; ctx.fillRect(i*(bw+2), h-bh, bw, 4);
    });
  }

  function resultView(){
    const correct = results.filter(r=>r.correct).length, wrong = results.length - correct;
    const accuracy = Math.round((correct/(results.length||1))*100);
    const total = perTimes.reduce((a,b)=>a+b,0);
    const feedback = getFeedbackMessage(accuracy, user);
    board.innerHTML = `
      <div class="qbar"><div class="heading" style="font-size:20px;">Results</div><div class="subtitle">Name: ${user}</div></div>
      <div class="scroll-area" style="display:grid;grid-template-columns:340px 1fr;gap:14px; align-items: start;">
        <div style="background:#f8fbff;border:1px solid var(--ring);border-radius:14px;padding:12px;">
          <canvas id="scoreGauge" width="300" height="160" style="width:100%;"></canvas>
          <div style="margin-top:10px;">
            <div><b>Correct:</b> ${correct}</div>
            <div><b>Wrong:</b> ${wrong}</div>
            <div><b>Accuracy:</b> ${accuracy}%</div>
            <div><b>Total time:</b> ${fmt(total)}</div>
          </div>
          <div style="border-top: 1px dashed var(--ring); margin-top: 14px; padding-top: 12px;">
              <div style="font-weight: 700; font-family: 'Playfair Display', serif;">A quick note for you:</div>
              <div style="color: var(--muted); margin-top: 4px; font-style: italic; font-size: 0.95rem;">"${feedback}"</div>
          </div>
        </div>
        <div style="background:#fff;border:1px solid var(--ring);border-radius:14px;padding:12px;">
          <div class="subtitle" style="margin-bottom:4px;">Per-question time histogram</div>
          <canvas id="timeHist" width="760" height="140" style="width:100%;"></canvas>
          <div style="margin-top:12px;">
            <div style="font-weight:800;margin-bottom:6px;">Time spent per question</div>
            <div style="max-height:240px;overflow:auto;border:1px solid #eef2ff;border-radius:10px;">
              <table style="width:100%;border-collapse:collapse;">
                <thead><tr style="background:#f8fbff;"><th style="text-align:left;padding:8px 8px;">Question</th><th style="text-align:left;padding:8px 8px;">Stopwatch</th></tr></thead>
                <tbody>${results.map((r,i)=>`<tr><td style="padding:6px 8px;border-bottom:1px solid #eef2ff;">Q${i+1}</td><td style="padding:6px 8px;border-bottom:1px solid #eef2ff;">${fmt(perTimes[i])}</td></tr>`).join('')}</tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div class="footer">
        <div></div>
        <div class="right-actions">
          <button class="btn primary" onclick="review()">Review Answers</button>
          <button class="btn ghost" onclick="modeView()">Back to Modes</button>
        </div>
      </div>`;
    setTimeout(()=>{ drawGauge('scoreGauge', Math.max(0,Math.min(100, Math.round((correct/questions.length)*100))), 'Score'); drawHistogram('timeHist', perTimes.slice()); },0);
    if(document.exitFullscreen) document.exitFullscreen();
  }

  function review(){
    let html='';
    results.forEach((r,i)=>{
      const d=questions[i];
      html += `
        <div style="padding:10px 0;border-bottom:1px solid #eef2ff">
          <div><b>Q${i+1}.</b> ${d.q}</div>
          <div style="color:${r.correct? '#10b981':'#ef4444'};font-weight:800;">Your: ${r.pick>=0?d.options[r.pick]:'—'} ${r.correct?'✔️':'❌'}</div>
          <div>Correct: ${d.options[d.answer]}</div>
          <div style="color:#5f6b85">Stopwatch: ${fmt(perTimes[i])}</div>
        </div>`;
    });
    board.innerHTML = `
      <div class="qbar"><div class="heading" style="font-size:20px;">Review</div><div class="subtitle">Name: ${user}</div></div>
      <div class="scroll-area" style="max-height:100%;padding-right:4px;">${html}</div>
      <div class="footer"><div></div><div class="right-actions"><button class="btn ghost" onclick="resultView()">Back to Results</button></div></div>`;
    ensureFullscreen();
  }

  // Init
  loginView();

  // expose
  window.checkGate=checkGate; window.review=review; window.modeView=modeView;
  window.doLogin=doLogin; window.setDevice=setDevice; window.start=start;
  window.next=next; window.prev=prev; window.skip=skip; window.showHint=showHint; window.showAnswer=showAnswer; window.pick=pick;
  window.submitConfirm=submitConfirm; window.hideSubmit=hideSubmit; window.doSubmit=doSubmit; window.resultView=resultView;
  window.initiateMobileMode = initiateMobileMode; window.deviceView = deviceView;
</script>
</body>
</html>