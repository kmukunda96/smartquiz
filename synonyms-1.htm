<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SMART CLASSES - Online Test</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
        body { font-family: 'Roboto', sans-serif; }
        body {
            -webkit-user-select: none; /* Safari */
            -ms-user-select: none; /* IE 10 and IE 11 */
            user-select: none; /* Standard syntax */
        }
    </style>
</head>
<body class="bg-gray-100 flex flex-col h-screen text-gray-800">

    <div id="login-page" class="flex flex-col items-center justify-center h-screen bg-gradient-to-br from-blue-500 to-blue-700 p-4">
        <div class="w-full max-w-md bg-white p-8 rounded-2xl shadow-2xl">
            <h1 class="text-3xl font-bold text-center text-gray-800 mb-2">SMART CLASSES</h1>
            <p class="text-center text-gray-500 mb-8">Online Test Portal</p>
            <form id="login-form">
                <div class="mb-4">
                    <label for="user-id" class="block text-sm font-medium text-gray-700 mb-1">User ID</label>
                    <input type="text" id="user-id" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500" required>
                </div>
                <div class="mb-6">
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                    <input type="password" id="password" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500" required>
                </div>
                <p id="login-error" class="text-red-500 text-sm text-center mb-4 hidden">Invalid User ID or Password.</p>
                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-transform transform hover:scale-105">Login</button>
            </form>
        </div>
    </div>

    <div id="instructions-page" class="hidden flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
        <div class="w-full max-w-4xl bg-white p-8 rounded-lg shadow-lg">
            <h1 class="text-2xl font-bold text-center mb-6">Instructions</h1>
            <div class="text-sm text-gray-700 space-y-4 max-h-[70vh] overflow-y-auto pr-4">
                <ol class="list-decimal list-inside space-y-3">
                    <li>Total duration of examination is <strong id="total-duration-display">12 minutes</strong>.</li>
                    <li>The clock will be set at the server. The countdown timer in the top right corner of screen will display the remaining time available for you to complete the examination. When the timer reaches zero, the examination will end by itself. You will not be required to end or submit your examination.</li>
                    <li>Test contains the following sections:
                        <table class="w-full my-2 border text-left">
                            <thead><tr class="bg-gray-100"><th class="p-2 border">SL. No.</th><th class="p-2 border">Name of the Test</th><th class="p-2 border">No. of Questions</th><th class="p-2 border">Marks</th></tr></thead>
                            <tbody><tr><td class="p-2 border">1</td><td class="p-2 border" id="instruction-test-name">Synonyms</td><td class="p-2 border" id="instruction-question-count">15</td><td class="p-2 border" id="instruction-marks">15</td></tr></tbody>
                        </table>
                    </li>
                    <li>Test contains Total <span id="instruction-total-questions">15</span> questions. Each correct answer you will be given <strong>+ve marks</strong> and for each wrong answer you may get <strong>-ve marks</strong>, based on Exam Pattern.</li>
                    <li>You can use a rough sheet while taking the test.</li>
                    <li>Do not click the button “Submit” before answering all the questions. A test once submitted cannot be resumed.</li>
                    <li>The Question Palette displayed on the right side of the screen will show the status of each question using one of the following symbols:
                        <ul class="list-disc list-inside ml-4 mt-2 space-y-1">
                            <li><span class="inline-block w-4 h-4 rounded-full bg-gray-300 mr-2 align-middle"></span> You have not visited the question yet.</li>
                            <li><span class="inline-block w-4 h-4 rounded-full bg-red-500 mr-2 align-middle"></span> You have not answered the question.</li>
                            <li><span class="inline-block w-4 h-4 rounded-full bg-green-500 mr-2 align-middle"></span> You have answered the question.</li>
                            <li><span class="inline-block w-4 h-4 rounded-full bg-purple-500 mr-2 align-middle"></span> You have NOT answered the question but have marked it for review.</li>
                            <li><span class="inline-flex items-center justify-center w-4 h-4 rounded-full bg-purple-500 mr-2 align-middle relative"><i class="fas fa-check-circle text-green-300 text-xs absolute -top-1 -right-1"></i></span> The question(s) "Answered and Marked for Review" will be considered for evaluation.</li>
                        </ul>
                    </li>
                    <li><strong>Procedure for answering a multiple-choice type question:</strong>
                        <ul class="list-disc list-inside ml-4 mt-2 space-y-1">
                            <li>To select your answer, click on the button of one of the options.</li>
                            <li>To deselect your chosen answer, click on the <strong>Clear Response</strong> button.</li>
                            <li>To change your chosen answer, click on the button of another option.</li>
                            <li>To save your answer, you MUST click on the <strong>Save & Next</strong> button.</li>
                            <li>To mark the question for review, click on the <strong>Mark for Review & Next</strong> button. If an answer is selected for a question that is Marked for Review, that answer will be considered in the evaluation.</li>
                        </ul>
                    </li>
                </ol>
            </div>
            <div class="mt-8 text-center">
                <button id="start-test-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg transition-transform transform hover:scale-105">Start Test</button>
            </div>
        </div>
    </div>
    
    <div id="quiz-wrapper" class="hidden flex-col flex-grow">
        <header class="bg-[#1E88E5] text-white shadow-md z-20">
            <div class="container mx-auto px-4 py-2 flex justify-between items-center">
                <h1 id="quiz-title" class="text-lg font-bold">SMART CLASSES - English Test</h1>
                <div class="flex items-center gap-4">
                    <div class="flex items-center gap-2"><span>Time Left:</span><span id="timer" class="font-bold">12:00</span></div>
                    <div class="flex items-center gap-1 bg-blue-800/50 p-1 rounded-lg">
                        <button id="font-decrease-btn" title="Decrease font size" class="w-7 h-7 flex items-center justify-center rounded-md hover:bg-blue-600">A-</button>
                        <button id="font-increase-btn" title="Increase font size" class="w-7 h-7 flex items-center justify-center rounded-md hover:bg-blue-600">A+</button>
                    </div>
                    <button id="pause-btn" title="Pause" class="w-8 h-8 flex items-center justify-center rounded-full hover:bg-blue-600"><i class="fas fa-pause"></i></button>
                    <button id="fullscreen-btn" title="Toggle Fullscreen" class="w-8 h-8 flex items-center justify-center rounded-full hover:bg-blue-600"><i id="fullscreen-icon" class="fas fa-expand"></i></button>
                </div>
            </div>
        </header>

        <main class="flex-grow container mx-auto p-4 flex flex-col lg:flex-row gap-4 overflow-y-auto">
            <div id="question-area" class="bg-white p-6 rounded-lg shadow-sm w-full lg:w-2/3 flex flex-col">
                 <div class="border-b pb-4 mb-4 flex justify-between items-center"><h2 class="text-lg font-semibold">Question No. <span id="current-question-display">1</span></h2></div>
                <div class="flex-grow"><p id="question-text" class="text-lg leading-relaxed mb-6"></p><div id="options-container" class="space-y-4"></div></div>
            </div>
            <aside class="w-full lg:w-1/3 bg-white p-6 rounded-lg shadow-sm">
                <div id="legend-container" class="grid grid-cols-2 gap-x-4 gap-y-2 mb-4 text-sm">
                    <div><span class="inline-block w-4 h-4 rounded-full bg-green-500 mr-2"></span><span id="answered-count">0</span> Answered</div>
                    <div><span class="inline-block w-4 h-4 rounded-full bg-red-500 mr-2"></span><span id="not-answered-count">1</span> Not Answered</div>
                    <div><span class="inline-block w-4 h-4 rounded-full bg-gray-300 mr-2"></span><span id="not-visited-count">24</span> Not Visited</div>
                    <div class="col-span-2"><span class="inline-block w-4 h-4 rounded-full bg-purple-500 mr-2"></span><span id="marked-review-count">0</span> Marked for Review</div>
                    <div class="col-span-2"><span class="inline-flex items-center justify-center w-4 h-4 rounded-full bg-purple-500 mr-2 align-middle relative"><i class="fas fa-check-circle text-green-300 text-xs absolute -top-1 -right-1"></i></span><span id="answered-marked-count">0</span> Answered & Marked</div>
                </div>
                <div id="question-palette" class="grid grid-cols-5 sm:grid-cols-6 lg:grid-cols-5 gap-2"></div>
            </aside>
        </main>

        <footer id="quiz-footer" class="bg-white shadow-[0_-2px_5px_rgba(0,0,0,0.1)] z-20">
            <div class="container mx-auto px-4 py-3 flex flex-wrap justify-between items-center gap-2">
                <div class="flex gap-2">
                    <button id="mark-review-next-btn" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded">Mark for Review & Next</button>
                    <button id="clear-response-btn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">Clear Response</button>
                </div>
                <button id="save-next-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Save & Next</button>
            </div>
        </footer>
    </div>
    
    <div id="pause-modal" class="hidden fixed inset-0 bg-black bg-opacity-70 flex-col items-center justify-center text-white z-50">
        <i class="fas fa-pause-circle text-6xl mb-4"></i><h2 class="text-4xl font-bold mb-8">Test Paused</h2>
        <button id="resume-btn" class="bg-blue-600 hover:bg-blue-700 font-bold py-3 px-8 rounded-lg text-xl">Resume</button>
    </div>

    <div id="submit-confirm-modal" class="hidden fixed inset-0 bg-black bg-opacity-60 items-center justify-center p-4 z-[102]">
        <div class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-sm text-center">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Submit Test?</h2>
            <p class="text-gray-600 mb-8">Are you sure you want to submit the test? This action cannot be undone.</p>
            <div class="flex justify-center gap-4">
                <button id="submit-confirm-no-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-6 rounded-lg">No</button>
                <button id="submit-confirm-yes-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-lg">Yes, Submit</button>
            </div>
        </div>
    </div>
    
    <div id="post-quiz-elements">
        <div id="post-submit-screen" class="hidden fixed inset-0 bg-gray-100 flex items-center justify-center p-4 z-[100]">
            <div class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-sm text-center">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Test Saved Successfully!</h2>
                <p class="text-gray-600 mb-8">What would you like to do next?</p>
                <div class="flex flex-col gap-4">
                    <button id="view-results-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg">View Results</button>
                    <button id="review-answers-btn" class="w-full bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-3 px-6 rounded-lg">Review Answers</button>
                    <button id="exit-test-btn" class="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg">Exit Test</button>
                </div>
            </div>
        </div>

        <div id="results-modal" class="hidden fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-[101]">
            <div id="results-content-wrapper" class="bg-gradient-to-br from-gray-50 to-blue-50 p-6 sm:p-8 rounded-2xl shadow-2xl w-full max-w-lg border-t-4 border-blue-500 flex flex-col">
                <div id="results-content">
                    <h2 class="text-3xl font-bold text-gray-800 text-center mb-2">Test Results</h2>
                    <p class="text-center text-gray-500 mb-6" id="test-date-time"></p>
                    <div class="space-y-4 text-base sm:text-lg">
                        <div class="flex justify-between items-center bg-white p-4 rounded-lg shadow-sm"><span class="font-bold text-gray-700">Final Score:</span><span class="font-bold text-blue-700 text-xl" id="final-score">0</span></div>
                        <div class="flex justify-between items-center bg-white p-4 rounded-lg shadow-sm"><span class="font-semibold text-gray-700">Questions Answered:</span><span class="font-bold text-blue-600" id="answered-questions">0</span></div>
                        <div class="flex justify-between items-center bg-white p-4 rounded-lg shadow-sm"><span class="font-semibold text-gray-700">Correct Answers:</span><span class="font-bold text-green-600" id="correct-answers">0</span></div>
                        <div class="flex justify-between items-center bg-white p-4 rounded-lg shadow-sm"><span class="font-semibold text-gray-700">Wrong Answers:</span><span class="font-bold text-red-600" id="wrong-answers">0</span></div>
                        <div class="flex justify-between items-center bg-white p-4 rounded-lg shadow-sm"><span class="font-semibold text-gray-700">Accuracy:</span><span class="font-bold text-blue-700" id="accuracy">0%</span></div>
                    </div>
                </div>
                <div class="mt-8 flex justify-between items-center">
                    <button id="back-to-options-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg">Back</button>
                    <button id="save-results-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg flex items-center gap-2"><i class="fas fa-download"></i> Download as PNG</button>
                </div>
            </div>
        </div>

        <div id="review-page" class="hidden fixed inset-0 bg-gray-100 flex flex-col z-[100]">
            <header class="bg-white shadow-md w-full flex-shrink-0">
                <div class="container mx-auto p-4 flex justify-between items-center">
                    <h1 class="text-xl font-bold">Review Answers</h1>
                    <button id="exit-review-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg">Exit Review</button>
                </div>
            </header>
            <main id="review-container" class="flex-grow container mx-auto p-4 overflow-y-auto min-h-0">
            </main>
        </div>
    </div>


    <script>
        document.addEventListener('contextmenu', event => event.preventDefault());
        document.addEventListener('keydown', function(e) {
            if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && ['I', 'J', 'C'].includes(e.key.toUpperCase())) || (e.ctrlKey && ['U', 'S', 'C', 'X'].includes(e.key.toUpperCase()))) {
                e.preventDefault();
            }
        });

        // CORRECTION: Question text now includes <strong><u> tags for highlighting.
        const questions = [
            { id: 1, text: "Despite the CEO’s <strong><u>VEHEMENT</u></strong> opposition, the board proceeded with the controversial merger. Find the synonym for the highlighted word.", options: ["Fervent", "Tepid", "Apathetic", "Lackadaisical"], answer: "A" },
            { id: 2, text: "China recently made a <strong><u>MONUMENTAL</u></strong> breakthrough in nuclear fusion technology. Find the synonym for the highlighted word.", options: ["Insignificant", "Historic", "Fragile", "Ordinary"], answer: "B" },
            { id: 3, text: "Tech giant Google announced that it will <strong><u>TERMINATE</u></strong> its contract with a major AI chip supplier. Find the synonym for the highlighted word.", options: ["Extend", "End", "Renew", "Amend"], answer: "B" },
            { id: 4, text: "Millions around the world tuned in to <strong><u>WITNESS</u></strong> the rare celestial event. Find the synonym for the highlighted word.", options: ["Ignore", "Experience", "Dispute", "Misinterpret"], answer: "B" },
            { id: 5, text: "Apple is expected to <strong><u>ACQUIRE</u></strong> a controlling stake in a leading AR company. Find the synonym for the highlighted word.", options: ["Sell", "Purchase", "Donate", "Abandon"], answer: "B" },
            { id: 6, text: "Germany has pledged to <strong><u>UTILISE</u></strong> artificial intelligence to improve traffic management. Find the synonym for the highlighted word.", options: ["Waste", "Use", "Reject", "Overlook"], answer: "B" },
            { id: 7, text: "The United Nations is working to <strong><u>PROCURE</u></strong> essential medical supplies for conflict-hit regions. Find the synonym for the highlighted word.", options: ["Obtain", "Lose", "Ignore", "Waste"], answer: "A" },
            { id: 8, text: "After months of delays, Boeing has received <strong><u>APPROVAL</u></strong> to proceed with its launch. Find the synonym for the highlighted word.", options: ["Application", "Order", "Abandon", "Consent"], answer: "D" },
            { id: 9, text: "The detective's attempt to <strong><u>PREVARICATE</u></strong> during the interrogation only made him more suspicious. Find the synonym for the highlighted word.", options: ["Procrastinate", "Evade", "Elaborate", "Confess"], answer: "B" },
            { id: 10, text: "The government's new policy aims to <strong><u>FACILITATE</u></strong> foreign investment. Find the synonym for the highlighted word.", options: ["Hinder", "Promote", "Regulate", "Tax"], answer: "B" },
            { id: 11, text: "The activist's relentless <strong><u>ENDEAVOUR</u></strong> led to significant environmental policy changes. Find the synonym for the highlighted word.", options: ["Effort", "Failure", "Difference", "Reward"], answer: "A" },
            { id: 12, text: "The research team discovered that the virus's <strong><u>INFECTIOUS</u></strong> nature was more severe than anticipated. Find the synonym for the highlighted word.", options: ["Benign", "Contagious", "Nonpathogenic", "Inert"], answer: "B" },
            { id: 13, text: "Experts warn of the <strong><u>PERNICIOUS</u></strong> effects of prolonged social media use on mental health. Find the synonym for the highlighted word.", options: ["Innocuous", "Harmful", "Trivial", "Ephemeral"], answer: "B" },
            { id: 14, text: "The CEO’s resignation was seen as <strong><u>TANTAMOUNT</u></strong> to an admission of the company’s internal problems. Find the synonym for the highlighted word.", options: ["Equivalent", "Opposite", "Contradictory", "Disparate"], answer: "A" },
            { id: 15, text: "Investors are advised to be <strong><u>CIRCUMSPECT</u></strong> amid the volatile market conditions. Find the synonym for the highlighted word.", options: ["Reckless", "Cautious", "Impetuous", "Careless"], answer: "B" }
        ];

        let currentQuestionIndex = 0;
        let selectedAnswers = Array(questions.length).fill(null);
        let markedForReview = Array(questions.length).fill(false);
        let questionsSeen = Array(questions.length).fill(false);
        const totalDurationMinutes = Math.round(questions.length * 0.8);
        const totalTimeInSeconds = totalDurationMinutes * 60;
        let timer = totalTimeInSeconds;
        let timerInterval;
        let baseFontSize = 14;
        let testResults = {};

        const loginPage = document.getElementById('login-page');
        const instructionsPage = document.getElementById('instructions-page');
        const quizWrapper = document.getElementById('quiz-wrapper');
        const loginForm = document.getElementById('login-form');
        const startTestBtn = document.getElementById('start-test-btn');
        const questionText = document.getElementById('question-text');
        const optionsContainer = document.getElementById('options-container');
        const currentQuestionDisplay = document.getElementById('current-question-display');
        const timerDisplay = document.getElementById('timer');
        const pauseBtn = document.getElementById('pause-btn');
        const pauseModal = document.getElementById('pause-modal');
        const resumeBtn = document.getElementById('resume-btn');
        const markReviewNextBtn = document.getElementById('mark-review-next-btn');
        const clearResponseBtn = document.getElementById('clear-response-btn');
        const saveNextBtn = document.getElementById('save-next-btn');
        const submitConfirmModal = document.getElementById('submit-confirm-modal');
        const submitConfirmYesBtn = document.getElementById('submit-confirm-yes-btn');
        const submitConfirmNoBtn = document.getElementById('submit-confirm-no-btn');
        const postSubmitScreen = document.getElementById('post-submit-screen');
        const viewResultsBtn = document.getElementById('view-results-btn');
        const reviewAnswersBtn = document.getElementById('review-answers-btn');
        const resultsModal = document.getElementById('results-modal');
        const saveResultsBtn = document.getElementById('save-results-btn');
        const backToOptionsBtn = document.getElementById('back-to-options-btn');
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        const fullscreenIcon = document.getElementById('fullscreen-icon');
        const fontIncreaseBtn = document.getElementById('font-increase-btn');
        const fontDecreaseBtn = document.getElementById('font-decrease-btn');
        const reviewPage = document.getElementById('review-page');
        const exitReviewBtn = document.getElementById('exit-review-btn');
        const exitTestBtn = document.getElementById('exit-test-btn');

        function updateLegendCounts() {
            let answered = 0, notAnswered = 0, marked = 0, notVisited = 0, answeredMarked = 0;
            for (let i = 0; i < questions.length; i++) {
                const isAnswered = selectedAnswers[i] !== null;
                const isMarked = markedForReview[i];
                if (isAnswered && isMarked) { answeredMarked++; }
                else if (isMarked) { marked++; }
                if (isAnswered) { answered++; }
                else if (questionsSeen[i]) { notAnswered++; }
                else { notVisited++; }
            }
            document.getElementById('answered-count').textContent = answered;
            document.getElementById('not-answered-count').textContent = notAnswered;
            document.getElementById('marked-review-count').textContent = marked;
            document.getElementById('not-visited-count').textContent = notVisited;
            document.getElementById('answered-marked-count').textContent = answeredMarked;
        }

        function initQuestionPalette() {
            const questionPalette = document.getElementById('question-palette');
            questionPalette.innerHTML = '';
            questions.forEach((q, index) => {
                const button = document.createElement('button');
                let stateClasses = '';
                const isAnswered = selectedAnswers[index] !== null;
                const isMarked = markedForReview[index];
                if (isAnswered && isMarked) {
                    stateClasses = 'bg-purple-500 text-white relative';
                    button.innerHTML = `${index + 1}<i class="fas fa-check-circle text-green-300 text-xs absolute -bottom-1 -right-1"></i>`;
                } else if (isMarked) {
                    stateClasses = 'bg-purple-500 text-white'; button.textContent = index + 1;
                } else if (isAnswered) {
                    stateClasses = 'bg-green-500 text-white'; button.textContent = index + 1;
                } else if (questionsSeen[index]) {
                    stateClasses = 'bg-red-500 text-white'; button.textContent = index + 1;
                } else {
                    stateClasses = 'bg-gray-300 text-gray-800'; button.textContent = index + 1;
                }
                button.className = `w-10 h-10 text-sm font-medium rounded transition-all duration-200 ${stateClasses}`;
                if (index === currentQuestionIndex) button.classList.add('ring-2', 'ring-offset-2', 'ring-blue-500');
                button.onclick = () => goToQuestion(index);
                questionPalette.appendChild(button);
            });
            updateLegendCounts();
        }

        function updateQuestion() {
            const q = questions[currentQuestionIndex];
            // CORRECTION: Switched to innerHTML to render the bold/underlined text.
            questionText.innerHTML = q.text;
            currentQuestionDisplay.textContent = currentQuestionIndex + 1;
            optionsContainer.innerHTML = '';
            q.options.forEach((option, index) => {
                const letter = String.fromCharCode(65 + index);
                const wrapper = document.createElement('div');
                wrapper.className = 'flex items-center p-3 border rounded-lg cursor-pointer transition-colors';
                const input = document.createElement('input');
                input.type = 'radio'; input.name = 'options';
                input.className = 'w-4 h-4 text-blue-600'; input.value = letter;
                if (selectedAnswers[currentQuestionIndex] === letter) {
                    input.checked = true; wrapper.classList.add('bg-blue-50', 'border-blue-500');
                }
                const label = document.createElement('label');
                label.textContent = option; label.className = 'ml-3 w-full text-md font-medium text-gray-900';
                wrapper.appendChild(input); wrapper.appendChild(label);
                wrapper.onclick = () => { input.checked = true; selectedAnswers[currentQuestionIndex] = letter; updateQuestion(); };
                optionsContainer.appendChild(wrapper);
            });
            initQuestionPalette();
            saveNextBtn.textContent = (currentQuestionIndex === questions.length - 1) ? 'Submit' : 'Save & Next';
        }
        
        function goToQuestion(index) {
            if (index < 0 || index >= questions.length) return;
            questionsSeen[index] = true;
            currentQuestionIndex = index;
            updateQuestion();
        }

        function startTimer() {
            timerInterval = setInterval(() => {
                timer--;
                const minutes = Math.floor(timer / 60);
                const seconds = timer % 60;
                timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                if (timer <= 0) evaluateAndEndTest();
            }, 1000);
        }

        function evaluateAndEndTest() {
            clearInterval(timerInterval);
            let correct = 0, answered = 0;
            const wrongQuestions = [], unansweredQuestions = [];
            questions.forEach((q, index) => {
                const selected = selectedAnswers[index];
                if (selected !== null) {
                    answered++;
                    if (selected === q.answer) correct++;
                    else wrongQuestions.push({ question: q, correctAnswer: q.answer });
                } else if (questionsSeen[index]) {
                    unansweredQuestions.push({ question: q, correctAnswer: q.answer });
                }
            });
            const wrong = answered - correct;
            const accuracy = answered > 0 ? ((correct / answered) * 100).toFixed(2) : 0;
            const finalScore = (correct * 1 - wrong * 0.25).toFixed(2);
            testResults = { correct, answered, wrong, accuracy, finalScore, wrongQuestions, unansweredQuestions };
            quizWrapper.classList.add('hidden');
            postSubmitScreen.classList.remove('hidden');
        }
        
        function showResults() {
            const testDateTime = new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata', dateStyle: 'full', timeStyle: 'short' });
            document.getElementById('final-score').textContent = testResults.finalScore;
            document.getElementById('answered-questions').textContent = testResults.answered;
            document.getElementById('correct-answers').textContent = testResults.correct;
            document.getElementById('wrong-answers').textContent = testResults.wrong;
            document.getElementById('accuracy').textContent = `${testResults.accuracy}%`;
            document.getElementById('test-date-time').textContent = `Completed on: ${testDateTime}`;
            postSubmitScreen.classList.add('hidden');
            resultsModal.classList.remove('hidden');
        }
        
        function getOptionTextFromLetter(question, letter) {
            const index = letter.charCodeAt(0) - 65;
            return question.options[index];
        }

        function populateReviewPage() {
            const container = document.getElementById('review-container');
            container.innerHTML = '';
            if (testResults.wrongQuestions.length > 0) {
                const header = document.createElement('h2');
                header.className = 'text-xl font-bold text-red-600 mb-4';
                header.textContent = 'Incorrect Answers';
                container.appendChild(header);
                testResults.wrongQuestions.forEach(item => {
                    const div = document.createElement('div');
                    div.className = 'p-4 bg-red-50 border border-red-200 rounded-lg mb-4';
                    div.innerHTML = `<div class="flex justify-between items-start mb-2">
                                        <p class="font-bold text-gray-800">Q: ${item.question.text}</p>
                                        <span class="text-xs flex-shrink-0 font-bold text-red-700 bg-red-200 px-2 py-1 rounded-full ml-2">INCORRECT</span>
                                     </div>
                                     <p class="text-green-600 font-semibold">Correct Answer: ${getOptionTextFromLetter(item.question, item.correctAnswer)}</p>`;
                    container.appendChild(div);
                });
            }
            if (testResults.unansweredQuestions.length > 0) {
                const header = document.createElement('h2');
                header.className = 'text-xl font-bold text-gray-700 mt-6 mb-4';
                header.textContent = 'Unanswered Questions';
                container.appendChild(header);
                testResults.unansweredQuestions.forEach(item => {
                    const div = document.createElement('div');
                    div.className = 'p-4 bg-gray-100 border border-gray-200 rounded-lg mb-4';
                    div.innerHTML = `<div class="flex justify-between items-start mb-2">
                                        <p class="font-bold text-gray-800">Q: ${item.question.text}</p>
                                        <span class="text-xs flex-shrink-0 font-bold text-gray-600 bg-gray-200 px-2 py-1 rounded-full ml-2">UNANSWERED</span>
                                     </div>
                                     <p class="text-green-600 font-semibold">Correct Answer: ${getOptionTextFromLetter(item.question, item.correctAnswer)}</p>`;
                    container.appendChild(div);
                });
            }
            postSubmitScreen.classList.add('hidden');
            reviewPage.classList.remove('hidden');
        }

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            if (document.getElementById('user-id').value === 'IMSMARTone' && document.getElementById('password').value === 'IWILLDOIT@2025') {
                document.getElementById('total-duration-display').textContent = `${totalDurationMinutes} minutes`;
                const qCount = questions.length;
                document.getElementById('instruction-question-count').textContent = qCount;
                document.getElementById('instruction-marks').textContent = qCount;
                document.getElementById('instruction-total-questions').textContent = qCount;
                loginPage.classList.add('hidden');
                instructionsPage.classList.remove('hidden');
                instructionsPage.classList.add('flex');
            } else { document.getElementById('login-error').classList.remove('hidden'); }
        });

        startTestBtn.addEventListener('click', () => {
            instructionsPage.classList.add('hidden');
            quizWrapper.classList.remove('hidden');
            quizWrapper.classList.add('flex');
            initQuiz();
        });

        saveNextBtn.addEventListener('click', () => {
            if (currentQuestionIndex === questions.length - 1) {
                submitConfirmModal.classList.remove('hidden');
                submitConfirmModal.classList.add('flex');
            } else { goToQuestion(currentQuestionIndex + 1); }
        });
        
        submitConfirmYesBtn.addEventListener('click', () => { submitConfirmModal.classList.add('hidden'); submitConfirmModal.classList.remove('flex'); evaluateAndEndTest(); });
        submitConfirmNoBtn.addEventListener('click', () => { submitConfirmModal.classList.add('hidden'); submitConfirmModal.classList.remove('flex'); });
        
        clearResponseBtn.addEventListener('click', () => { selectedAnswers[currentQuestionIndex] = null; updateQuestion(); });
        markReviewNextBtn.addEventListener('click', () => {
            markedForReview[currentQuestionIndex] = true;
            if (currentQuestionIndex === questions.length - 1) initQuestionPalette();
            else goToQuestion(currentQuestionIndex + 1);
        });

        viewResultsBtn.addEventListener('click', showResults);
        reviewAnswersBtn.addEventListener('click', populateReviewPage);
        exitReviewBtn.addEventListener('click', () => { reviewPage.classList.add('hidden'); postSubmitScreen.classList.remove('hidden'); });
        backToOptionsBtn.addEventListener('click', () => { resultsModal.classList.add('hidden'); postSubmitScreen.classList.remove('hidden'); });
        exitTestBtn.addEventListener('click', () => { location.reload(); });
        
        pauseBtn.addEventListener('click', () => { clearInterval(timerInterval); pauseModal.classList.remove('hidden'); pauseModal.classList.add('flex'); });
        resumeBtn.addEventListener('click', () => { startTimer(); pauseModal.classList.add('hidden'); pauseModal.classList.remove('flex'); });
        
        saveResultsBtn.addEventListener('click', () => {
            html2canvas(document.getElementById('results-content-wrapper'), { scale: 2 }).then(canvas => {
                const link = document.createElement('a'); link.download = 'smart-classes-quiz-results.png';
                link.href = canvas.toDataURL('image/png'); link.click();
            });
        });

        fullscreenBtn.addEventListener('click', () => {
            if (!document.fullscreenElement) document.documentElement.requestFullscreen();
            else document.exitFullscreen();
        });
        document.addEventListener('fullscreenchange', () => {
            fullscreenIcon.classList.toggle('fa-expand', !document.fullscreenElement);
            fullscreenIcon.classList.toggle('fa-compress', !!document.fullscreenElement);
        });
        
        function applyFontSizing() {
            const questionTextEl = document.getElementById('question-text');
            const optionsContainerEl = document.getElementById('options-container');
            if (questionTextEl) questionTextEl.style.fontSize = `${baseFontSize}pt`;
            if (optionsContainerEl) optionsContainerEl.style.fontSize = `${baseFontSize}pt`;
        }
        fontIncreaseBtn.addEventListener('click', () => { if (baseFontSize < 28) { baseFontSize += 4; applyFontSizing(); } });
        fontDecreaseBtn.addEventListener('click', () => { if (baseFontSize > 10) { baseFontSize -= 4; applyFontSizing(); } });

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function initQuiz() {
            shuffleArray(questions);
            questionsSeen = Array(questions.length).fill(false);
            selectedAnswers = Array(questions.length).fill(null);
            markedForReview = Array(questions.length).fill(false);
            questionsSeen[0] = true;
            applyFontSizing();
            updateQuestion();
            startTimer();
        }
    </script>
</body>
</html>