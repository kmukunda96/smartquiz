<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spelling Bee</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            touch-action: manipulation; /* Prevents double-tap zoom on mobile */
        }
        .focus-ring {
            transition: box-shadow 0.2s ease-in-out;
        }
        .focus-ring:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.6);
        }
        @keyframes shrink {
            from { width: 100%; }
            to { width: 0%; }
        }
        .timer-bar-animate {
            animation: shrink 20s linear forwards; /* Adjusted timer for spelling */
        }
        .screen {
            transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out;
        }
        .screen.hidden {
            opacity: 0;
            transform: scale(0.95);
            pointer-events: none;
            position: absolute;
        }
        .highlight-letter {
            color: #fbbf24; /* amber-400 */
            font-weight: bold;
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex justify-center min-h-screen p-4 pt-8 sm:pt-4 sm:items-center">

    <div id="game-container" class="w-full max-w-lg mx-auto bg-gray-800 p-6 sm:p-8 rounded-2xl shadow-2xl border border-gray-700 text-center relative overflow-hidden">

        <!-- Login Screen -->
        <div id="login-screen" class="screen space-y-6">
            <h1 class="text-5xl md:text-6xl font-bold text-amber-400">Welcome</h1>
            <p class="text-lg text-gray-300">Log in to start the Spelling Bee.</p>
            <form id="login-form" class="space-y-4">
                <input type="text" id="username" placeholder="Username" class="w-full text-center bg-gray-700 text-white text-xl p-3 rounded-lg border-2 border-gray-600 focus:border-amber-500 focus-ring" required>
                <input type="password" id="password" placeholder="Password: •••••••••" class="w-full text-center bg-gray-700 text-white text-xl p-3 rounded-lg border-2 border-gray-600 focus:border-amber-500 focus-ring" required>
                <button type="submit" class="w-full bg-amber-600 hover:bg-amber-700 text-white font-bold py-3 px-8 rounded-lg text-xl shadow-lg transform hover:scale-105 transition-transform duration-200 focus-ring">
                    Login & Start
                </button>
            </form>
            <p id="login-error" class="text-red-400 h-4"></p>
        </div>

        <!-- Start Screen -->
        <div id="start-screen" class="screen hidden space-y-8">
            <h1 class="text-5xl md:text-6xl font-bold text-amber-400">Spelling Bee</h1>
            <div class="text-center">
                <p class="text-lg text-gray-400">Welcome, <span id="welcome-username" class="font-bold text-gray-200"></span>!</p>
                <p class="text-lg text-gray-300">Your Best Score: <span id="best-score-start" class="font-bold text-amber-400">0</span></p>
            </div>
            <p class="text-lg text-gray-300">Guess the two missing letters in each word. You have 5 minutes!</p>
            <button id="start-button" class="w-full bg-amber-600 hover:bg-amber-700 text-white font-bold py-4 px-8 rounded-lg text-2xl shadow-lg transform hover:scale-105 transition-transform duration-200 focus-ring">
                Start Game
            </button>
        </div>

        <!-- Game Screen -->
        <div id="game-screen" class="screen hidden w-full">
            <div class="grid grid-cols-4 gap-2 sm:gap-4 mb-4 text-center">
                <div>
                    <span class="text-gray-400 text-xs sm:text-sm uppercase tracking-wider">SCORE</span>
                    <p id="score" class="text-2xl sm:text-3xl font-bold">0</p>
                </div>
                 <div>
                    <span class="text-gray-400 text-xs sm:text-sm uppercase tracking-wider">BEST</span>
                    <p id="best-score-game" class="text-2xl sm:text-3xl font-bold">0</p>
                </div>
                <div>
                    <span class="text-gray-400 text-xs sm:text-sm uppercase tracking-wider">GAME TIME</span>
                    <p id="quiz-timer-display" class="text-2xl sm:text-3xl font-bold">5:00</p>
                </div>
                <div>
                    <span class="text-gray-400 text-xs sm:text-sm uppercase tracking-wider">Q-TIMER</span>
                    <p id="timer-display" class="text-2xl sm:text-3xl font-bold">20</p>
                </div>
            </div>
            <p class="text-center text-gray-400 mb-4 h-6">User: <span id="game-username" class="font-bold text-gray-200"></span></p>

            <div class="w-full bg-gray-700 rounded-full h-2.5 mb-8">
                <div id="timer-bar" class="bg-amber-500 h-2.5 rounded-full"></div>
            </div>

            <div class="bg-gray-900 p-4 sm:p-6 rounded-lg shadow-inner border border-gray-700 mb-8 min-h-[120px] flex items-center justify-center">
                <p id="question-text" class="text-3xl sm:text-4xl lg:text-5xl font-mono tracking-widest"></p>
            </div>
            
            <div id="answer-area" class="grid grid-cols-2 gap-4"></div>
            <div id="feedback" class="mt-4 text-2xl font-semibold h-8 transition-opacity duration-300 opacity-0"></div>
            <div id="definition-area" class="mt-2 text-lg min-h-[80px] text-left"></div>
        </div>
        
        <!-- End Screen -->
        <div id="end-screen" class="screen hidden space-y-8">
            <h2 class="text-5xl md:text-6xl font-bold text-amber-400">Time's Up!</h2>
            <div class="text-center">
                <p class="text-lg text-gray-300">Your Final Score</p>
                <p id="final-score" class="text-7xl font-bold">0</p>
            </div>
            <button id="play-again-button" class="w-full bg-amber-600 hover:bg-amber-700 text-white font-bold py-4 px-8 rounded-lg text-2xl shadow-lg transform hover:scale-105 transition-transform duration-200 focus-ring">
                Restart Quiz
            </button>
        </div>
    </div>

    <script>
        document.addEventListener('contextmenu', event => event.preventDefault());

        const wordList = [
            'aberration', 'abhorrent', 'acquiesce', 'anachronism', 'apartheid', 'archipelago', 'bourgeoisie', 'buoyancy', 'camouflage', 'cinematography',
            'conscientious', 'demagogue', 'diphthong', 'ecstasy', 'effervescent', 'embezzlement', 'euphemism', 'exaggerate', 'fuchsia', 'gregarious',
            'haemorrhage', 'idiosyncrasy', 'inconsequential', 'juxtaposition', 'kaleidoscope', 'logorrhoea', 'lieutenant', 'maintenance', 'manoeuvre', 'millennium',
            'nauseous', 'onomatopoeia', 'paparazzi', 'pharaoh', 'phenomenon', 'playwright', 'prerogative', 'psychedelic', 'queue', 'reconnaissance',
            'rendezvous', 'rhetoric', 'schizophrenia', 'sovereignty', 'synecdoche', 'tyrannical', 'ubiquitous', 'unctuous', 'vacillate', 'vexatious',
            'whimsical', 'xenophobia', 'yacht', 'zealous', 'zucchini', 'accommodate', 'beautiful', 'calendar', 'definitely', 'embarrass', 'favourite',
            'government', 'harass', 'immediately', 'knowledge', 'library', 'necessary', 'occasionally', 'privilege', 'questionnaire', 'receive',
            'sincerely', 'tomorrow', 'until', 'weird', 'achieve', 'address', 'apparent', 'argument', 'assassination', 'basically', 'beginning',
            'believe', 'bizarre', 'business', 'cemetery', 'chauffeur', 'colleague', 'committee', 'conscious', 'curiosity', 'deceive', 'discipline',
            'drunkenness', 'environment', 'existence', 'fahrenheit', 'finally', 'fluorescent', 'foreign', 'foreseeable', 'forty', 'forward',
            'friend', 'further', 'gist', 'glamorous', 'governor', 'grateful', 'guarantee', 'guidance', 'happened', 'humorous', 'ignorance',
            'imitate', 'independent', 'indispensable', 'innocuous', 'intelligence', 'its', 'jewellery', 'judgement', 'kernel', 'leisure',
            'liaison', 'licence', 'lightning', 'loneliness', 'manageable', 'mischievous', 'misspell', 'mortgage', 'mosquito', 'mysterious',
            'neighbour', 'noticeable', 'occurrence', 'outrageous', 'parliament', 'pastime', 'perceive', 'perseverance', 'personnel', 'plagiarize',
            'possess', 'precede', 'principal', 'principle', 'pronunciation', 'proof', 'propaganda', 'publicly', 'really', 'recommend',
            'relevant', 'restaurant', 'rhythm', 'ridiculous', 'sacrilegious', 'schedule', 'seize', 'separate', 'sergeant', 'siege',
            'similar', 'skilful', 'speech', 'subtly', 'successful', 'supersede', 'surprise', 'technical', 'temperamental', 'thoroughly',
            'though', 'through', 'tongue', 'truly', 'unanimous', 'unnecessary', 'vaccinate', 'vacuum', 'vicious', 'weather', 'wednesday'
        ];

        // DOM Elements
        const screens = { login: document.getElementById('login-screen'), start: document.getElementById('start-screen'), game: document.getElementById('game-screen'), end: document.getElementById('end-screen') };
        const loginForm = document.getElementById('login-form'), usernameInput = document.getElementById('username'), passwordInput = document.getElementById('password'), loginError = document.getElementById('login-error');
        const startButton = document.getElementById('start-button'), playAgainButton = document.getElementById('play-again-button');
        const scoreDisplay = document.getElementById('score'), finalScoreDisplay = document.getElementById('final-score'), bestScoreStartDisplay = document.getElementById('best-score-start'), bestScoreGameDisplay = document.getElementById('best-score-game');
        const welcomeUsername = document.getElementById('welcome-username'), gameUsername = document.getElementById('game-username');
        const timerDisplay = document.getElementById('timer-display'), quizTimerDisplay = document.getElementById('quiz-timer-display'), timerBar = document.getElementById('timer-bar');
        const questionText = document.getElementById('question-text'), answerArea = document.getElementById('answer-area'), feedback = document.getElementById('feedback'), definitionArea = document.getElementById('definition-area');

        // Game State
        let score, timer, quizTime, timerInterval, quizTimerInterval, currentQuestion, currentUser, bestScore;
        let shuffledWords = [];
        const QUESTION_TIME = 20;
        const GAME_TIME = 300;

        function transitionToScreen(toScreen) {
            Object.values(screens).forEach(screen => { if (!screen.classList.contains('hidden')) screen.classList.add('hidden') });
            screens[toScreen].classList.remove('hidden');
        }

        function openFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) { elem.requestFullscreen().catch(err => console.warn(`Fullscreen denied: ${err.message}`)); } 
            else if (elem.webkitRequestFullscreen) { elem.webkitRequestFullscreen().catch(err => console.warn(`Fullscreen denied: ${err.message}`)); } 
            else if (elem.msRequestFullscreen) { elem.msRequestFullscreen().catch(err => console.warn(`Fullscreen denied: ${err.message}`)); }
        }

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const username = usernameInput.value.trim();
            const password = passwordInput.value;
            if (password === '214214214' && username) {
                currentUser = username;
                openFullscreen();
                bestScore = parseInt(localStorage.getItem(`spellingBestScore_${currentUser}`) || '0');
                bestScoreStartDisplay.textContent = bestScore;
                welcomeUsername.textContent = currentUser;
                transitionToScreen('start');
                loginError.textContent = '';
                passwordInput.value = '';
            } else {
                loginError.textContent = 'Invalid username or password.';
            }
        });

        function startGame() {
            transitionToScreen('game');
            score = 0;
            scoreDisplay.textContent = score;
            bestScoreGameDisplay.textContent = bestScore;
            gameUsername.textContent = currentUser;
            quizTime = GAME_TIME;
            quizTimerDisplay.textContent = "5:00";
            shuffledWords = [...wordList].sort(() => 0.5 - Math.random());
            startQuizTimer();
            nextQuestion();
        }

        function startQuizTimer() {
            clearInterval(quizTimerInterval); // Ensure no multiple timers
            quizTimerInterval = setInterval(() => {
                if (quizTime > 0) quizTime--;
                const minutes = Math.floor(quizTime / 60);
                const seconds = quizTime % 60;
                quizTimerDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                if (quizTime <= 0) endGame();
            }, 1000);
        }

        function endGame() {
            clearInterval(timerInterval);
            clearInterval(quizTimerInterval);
            if (score > bestScore) {
                bestScore = score;
                localStorage.setItem(`spellingBestScore_${currentUser}`, bestScore);
                bestScoreStartDisplay.textContent = bestScore;
            }
            finalScoreDisplay.textContent = score;
            transitionToScreen('end');
        }

        function nextQuestion() {
            if (quizTime <= 0 || shuffledWords.length === 0) {
                if (!screens.game.classList.contains('hidden')) endGame();
                return;
            }
            startQuizTimer(); // Resume game timer
            feedback.classList.add('opacity-0');
            answerArea.innerHTML = '';
            definitionArea.innerHTML = '';
            questionText.classList.remove('tracking-widest', 'text-green-400', 'text-orange-400');

            setTimeout(() => {
                generateQuestion();
                startTimer();
            }, 400);
        }

        function generateQuestion() {
            const word = shuffledWords.pop();
            let index1 = Math.floor(Math.random() * word.length);
            let index2;
            do {
                index2 = Math.floor(Math.random() * word.length);
            } while (index1 === index2 || Math.abs(index1 - index2) === 1);

            const letters = [word[index1], word[index2]].sort();
            currentQuestion = { word: word, answer: letters.join(', '), indices: [index1, index2] };

            let displayWord = word.split('');
            displayWord[index1] = '?';
            displayWord[index2] = '?';
            questionText.textContent = displayWord.join('');
            questionText.classList.add('tracking-widest');

            const options = [currentQuestion.answer];
            const vowels = 'aeiou';
            const consonants = 'bcdfghjklmnpqrstvwxyz';

            while (options.length < 4) {
                let letter1 = Math.random() < 0.5 ? vowels[Math.floor(Math.random() * vowels.length)] : consonants[Math.floor(Math.random() * consonants.length)];
                let letter2 = Math.random() < 0.5 ? vowels[Math.floor(Math.random() * vowels.length)] : consonants[Math.floor(Math.random() * consonants.length)];
                let wrongOption = [letter1, letter2].sort().join(', ');
                if (!options.includes(wrongOption)) options.push(wrongOption);
            }
            
            options.sort(() => 0.5 - Math.random());
            options.forEach(option => createOptionButton(option));
        }
        
        function createOptionButton(optionText) {
            const button = document.createElement('button');
            button.textContent = optionText;
            button.className = 'bg-gray-700 hover:bg-gray-600 text-white font-bold py-4 px-2 rounded-lg text-2xl shadow-md transform hover:scale-105 transition-transform duration-200 focus-ring';
            button.addEventListener('click', () => checkAnswer(optionText));
            answerArea.appendChild(button);
        }

        function startTimer() {
            clearInterval(timerInterval);
            timer = QUESTION_TIME;
            timerDisplay.textContent = timer;
            timerBar.style.transition = 'none';
            timerBar.style.width = '100%';
            void timerBar.offsetWidth; 
            timerBar.style.transition = `width ${QUESTION_TIME}s linear`;
            timerBar.style.width = '0%';

            timerInterval = setInterval(() => {
                timer--;
                timerDisplay.textContent = timer;
                if (timer <= 0) handleAnswer(false);
            }, 1000);
        }
        
        function checkAnswer(userAnswer) {
            handleAnswer(userAnswer === currentQuestion.answer);
        }

        async function handleAnswer(isCorrect) {
            clearInterval(timerInterval);
            clearInterval(quizTimerInterval); // PAUSE game timer
            timerBar.style.width = timerBar.getBoundingClientRect().width + 'px'; // Stop animation

            answerArea.innerHTML = '';

            if (isCorrect) {
                score++;
                scoreDisplay.textContent = score;
                feedback.textContent = 'Correct!';
                feedback.className = 'mt-4 text-2xl font-semibold h-8 text-green-400 opacity-100';
                questionText.classList.add('text-green-400');
            } else {
                feedback.textContent = `Incorrect!`;
                feedback.className = 'mt-4 text-2xl font-semibold h-8 text-red-400 opacity-100';
                questionText.classList.add('text-orange-400');
            }

            let highlightedWord = currentQuestion.word.split('').map((char, index) => {
                return currentQuestion.indices.includes(index) ? `<span class="highlight-letter">${char}</span>` : char;
            }).join('');
            questionText.innerHTML = highlightedWord;
            questionText.classList.remove('tracking-widest');

            definitionArea.innerHTML = `<p class="text-gray-400 italic mt-2">Fetching definition...</p>`;

            try {
                const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${currentQuestion.word}`);
                if (!response.ok) throw new Error('Definition not found');
                const data = await response.json();
                const meaning = data[0]?.meanings[0]?.definitions[0]?.definition;
                if (meaning) {
                    definitionArea.innerHTML = `<p class="text-gray-300 mt-2"><strong class="text-amber-400">Meaning:</strong> ${meaning}</p>`;
                } else {
                    throw new Error('Definition not found');
                }
            } catch (error) {
                definitionArea.innerHTML = `<p class="text-gray-400 italic mt-2">Could not find a definition for this word.</p>`;
            }

            const nextButton = document.createElement('button');
            nextButton.textContent = 'Next →';
            nextButton.className = 'w-full mt-4 bg-amber-600 hover:bg-amber-700 text-white font-bold py-4 px-8 rounded-lg text-2xl shadow-lg transform hover:scale-105 transition-transform duration-200 focus-ring';
            nextButton.onclick = nextQuestion;
            answerArea.appendChild(nextButton);
            nextButton.focus();
        }

        startButton.addEventListener('click', startGame);
        playAgainButton.addEventListener('click', () => transitionToScreen('start'));
    </script>
</body>
</html>

